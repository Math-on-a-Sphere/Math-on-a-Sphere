/* parser generated by jison 0.4.10 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"weblogo":4,"EOF":5,"block":6,"statements":7,"{":8,"}":9,"statement":10,"assignment":11,"function_call":12,"repeat_stmt":13,"if_stmt":14,"set_stmt":15,"SET":16,"identifier":17,"expr":18,"lvalue":19,".":20,"index":21,"[":22,"]":23,"=":24,"FUNCTION":25,"(":26,")":27,"param_list":28,",":29,"BUILTIN_NULL":30,"BUILTIN_ARG":31,"arguments":32,"ElementList":33,"REPEAT":34,"IF":35,"ELSE":36,"re":37,"complex_value":38,"-":39,"INT":40,"JSONObject":41,"JSONArray":42,"IDENTIFIER":43,"string":44,"STRING":45,"number_type":46,"NUMBER":47,"number":48,"E":49,"PI":50,"boolean":51,"TRUE":52,"FALSE":53,"simple_value":54,"+":55,"*":56,"/":57,"==":58,"<":59,">":60,"JSONMemberList":61,"JSONMember":62,":":63,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"{",9:"}",16:"SET",20:".",22:"[",23:"]",24:"=",25:"FUNCTION",26:"(",27:")",29:",",30:"BUILTIN_NULL",31:"BUILTIN_ARG",34:"REPEAT",35:"IF",36:"ELSE",39:"-",40:"INT",43:"IDENTIFIER",45:"STRING",47:"NUMBER",49:"E",50:"PI",52:"TRUE",53:"FALSE",55:"+",56:"*",57:"/",58:"==",59:"<",60:">",63:":"},
productions_: [0,[3,2],[4,1],[4,1],[6,3],[7,2],[7,1],[10,1],[10,1],[10,1],[10,1],[10,1],[15,3],[19,1],[19,3],[19,4],[11,3],[11,6],[11,7],[28,1],[28,3],[12,1],[12,3],[12,2],[12,4],[32,1],[13,3],[14,3],[14,5],[18,1],[18,1],[18,2],[21,1],[21,1],[38,1],[38,1],[17,1],[44,1],[46,1],[46,1],[48,1],[48,1],[48,1],[51,1],[51,1],[54,1],[54,1],[54,1],[37,1],[37,3],[37,4],[37,3],[37,3],[37,3],[37,3],[37,3],[37,3],[37,3],[37,3],[37,3],[41,2],[41,3],[61,1],[61,3],[62,3],[62,3],[42,2],[42,3],[33,1],[33,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:return $$[$0-1];
break;
case 2:this.$ = {};
   this.$['type'] = 'weblogo';
   this.$['handler'] = 'skip';
   this.$['value'] = $$[$0];
break;
case 3:this.$ = {};
   this.$['type'] = 'weblogo';
   this.$['handler'] = 'skip';
   this.$['value'] = $$[$0];
break;
case 4:this.$ = {};
    this.$['type'] = 'block';
    this.$['handler'] = 'block';
    this.$['value'] = $$[$0-1];
break;
case 5:this.$ = $$[$0]; 
    $$[$0].unshift($$[$0-1]);
break;
case 6:this.$ = [$$[$0]];
break;
case 7:this.$ = {};
    this.$['type'] = 'statement';
    this.$['handler'] = 'statement';
    this.$['value'] = $$[$0];
break;
case 8:this.$ = {};
    this.$['type'] = 'statement';
    this.$['handler'] = 'statement';
    this.$['value'] = $$[$0];
break;
case 9:this.$ = {};
   this.$['type'] = 'repeat';
   this.$['handler'] = 'statement';
   this.$['value'] = $$[$0];
break;
case 10:this.$ = {};
   this.$['type'] = 'if';
   this.$['handler'] = 'statement';
   this.$['value'] = $$[$0];
break;
case 12:this.$ = {}; 
    this.$['type'] = 'set_stmt'; 
    this.$['handler'] = 'set_stmt'; 
    this.$['args'] = [$$[$0-1], $$[$0]];
break;
case 14:this.$ = {};
   this.$.handler = "index_op";
   this.$.args = [$$[$0-2], $$[$0]];
break;
case 15:this.$ = {};
   this.$.handler = "index_op";
   this.$.args = [$$[$0-3], $$[$0-1]];
break;
case 16:this.$ = {};
    this.$['type'] = 'assignment';
    this.$['handler'] = 'var_assign';
    this.$['id'] = $$[$0-2];
    this.$['value'] = $$[$0];
break;
case 17:this.$ = {};
    this.$['type'] = 'assignment';
    this.$['handler'] = 'fun_assign';
    this.$['id'] = $$[$0-5];
    this.$['args'] = [];
    this.$['block'] = $$[$0];
break;
case 18:this.$ = {};
    this.$['type'] = 'assignment';
    this.$['handler'] = 'fun_assign';
    this.$['id'] = $$[$0-6];
    this.$['args'] = $$[$0-2];
    this.$['block'] = $$[$0];
break;
case 19:this.$ = [$$[$0]];
break;
case 20:this.$ = $$[$0]; 
    $$[$0].unshift($$[$0-2]);
break;
case 21:this.$ = {
    "type": "function",
    "handler": "builtin",
    "id": $$[$0]
    };
break;
case 22:this.$ = {
    "type": "function",
    "handler": "builtin",
    "id": $$[$0-2]
    };
break;
case 23:this.$ = {    
    "type": "function",      
    "handler": "func",      
    "id": $$[$0-1],      
    "args": $$[$0]
    };
break;
case 24:this.$ = {}; 
    this.$['type'] = 'function';
    this.$['handler'] = 'func';
    this.$['id'] = $$[$0-3];
    this.$['args'] = $$[$0-1];
break;
case 26:this.$ = {}; 
    this.$['type'] = 'repeat_stmt'; 
    this.$['handler'] = 'repeat_stmt'; 
    this.$['args'] = [$$[$0-1], $$[$0]];
break;
case 27:this.$ = {};
    this.$['type'] = 'if_stmt';
    this.$['handler'] = 'if_stmt';
    this.$['condition'] = $$[$0-1];
    this.$['block'] = $$[$0];
break;
case 28:this.$ = {};
    this.$['type'] = 'if_stmt';
    this.$['handler'] = 'ifelse_stmt';
    this.$['condition'] = $$[$0-3];
    this.$['block'] = [$$[$0-2], $$[$0]];
break;
case 31:this.$ = {};
   this.$['type'] = 'expr';
   this.$['handler'] = 'uminus';
   this.$['value'] = $$[$0];
break;
case 32:this.$ = {
    type: "number",
    handler: "value",
    value: Number(yytext)};
break;
case 33:this.$ = {
    type: "string",
    handler: "value",
    value: $$[$0].value};
break;
case 36:this.$ = {};
    this.$['type'] = 'identifier';
    this.$['handler'] = 'value';
    this.$['value'] = yytext;
break;
case 37:this.$ = {};
    this.$['type'] = 'string';
    this.$['handler'] = 'value';
    this.$['value'] = yytext;
break;
case 40:this.$ = {};
    this.$['type'] = 'number';
    this.$['handler'] = 'value';
    this.$['value'] = Number(yytext);
break;
case 41:this.$ = {};
    this.$['type'] = 'number';
    this.$['handler'] = 'value';
    this.$['value'] = Math.E;
break;
case 42:this.$ = {};
    this.$['type'] = 'number';
    this.$['handler'] = 'value';
    this.$['value'] = Math.PI;
break;
case 43:this.$ = {};
    this.$['type'] = 'boolean';
    this.$['handler'] = 'value';
    this.$['value'] = true;
break;
case 44:this.$ = {};
    this.$['type'] = 'boolean';
    this.$['handler'] = 'value';
    this.$['value'] = false;
break;
case 49:this.$ = {};
   this.$['type'] = 're';
   this.$['handler'] = 'op';
   this.$['op'] = '+';
   this.$['args'] = [$$[$0-2], $$[$0]];
break;
case 50:this.$ = {};
   this.$['type'] = 're';
   this.$['handler'] = 'index_op';
   this.$['args'] = [$$[$0-3], $$[$0-1]];
break;
case 51:this.$ = {};
   this.$.handler = "index_op";
   this.$.args = [$$[$0-2], $$[$0]];
break;
case 52:this.$ = {};
   this.$['type'] = 're';
   this.$['handler'] = 'op';
   this.$['op'] = '-';
   this.$['args'] = [$$[$0-2], $$[$0]];
break;
case 53:this.$ = {};
   this.$['type'] = 're';
   this.$['handler'] = 'op';
   this.$['op'] = '*';
   this.$['args'] = [$$[$0-2], $$[$0]];
break;
case 54:this.$ = {};
   this.$['type'] = 're';
   this.$['handler'] = 'op';
   this.$['op'] = '/';
   this.$['args'] = [$$[$0-2], $$[$0]];
break;
case 55:this.$ = {};
   this.$['type'] = 're';
   this.$['handler'] = 'op';
   this.$['op'] = '==';
   this.$['args'] = [$$[$0-2], $$[$0]];
break;
case 56:this.$ = {};
   this.$['type'] = 're';
   this.$['handler'] = 'op';
   this.$['op'] = '<';
   this.$['args'] = [$$[$0-2], $$[$0]];
break;
case 57:this.$ = {};
   this.$['type'] = 're';
   this.$['handler'] = 'op';
   this.$['op'] = '>';
   this.$['args'] = [$$[$0-2], $$[$0]];
break;
case 58:this.$ = {};
   this.$['type'] = 're';
   this.$['handler'] = 'group_op';
   this.$['args'] = [$$[$0-1]];
break;
case 59:this.$ = {};
   this.$['type'] = 're';
   this.$['handler'] = 'skip';
   this.$['value'] = $$[$0-1];
break;
case 60:this.$ = {};
    this.$['type'] = 'JSONObject';
    this.$['handler'] = 'JSONObject';
    this.$['value'] = '{}';
break;
case 61:this.$ = {};
    this.$['type'] = 'JSONObject';
    this.$['handler'] = 'JSONObject';
    this.$['value'] = $$[$0-1];
break;
case 62:this.$ = {};
    this.$ = [$$[$0]];
break;
case 63:this.$ = [$$[$0-2]]; this.$ = this.$.concat($$[$0]);
break;
case 64:this.$ = {key: $$[$0-2], value: $$[$0]};
break;
case 65:this.$ = {key: $$[$0-2], value: $$[$0]};
break;
case 66:this.$ = {};
    this.$['type'] = 'JSONArray';
    this.$['handler'] = 'list';
    this.$['value'] = [];
break;
case 67:this.$ = {};
    this.$['type'] = 'JSONArray';
    this.$['handler'] = 'list';
    this.$['value'] = $$[$0-1];
break;
case 68:this.$ = [$$[$0]];
break;
case 69:this.$ = $$[$0]; 
    $$[$0].unshift($$[$0-2]);
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:[1,5],10:6,11:7,12:8,13:9,14:10,15:11,16:[1,18],17:15,19:12,30:[1,13],31:[1,14],34:[1,16],35:[1,17],43:[1,19]},{1:[3]},{5:[1,20]},{5:[2,2]},{5:[2,3]},{7:21,10:6,11:7,12:8,13:9,14:10,15:11,16:[1,18],17:15,19:12,30:[1,13],31:[1,14],34:[1,16],35:[1,17],43:[1,19]},{5:[2,6],7:22,9:[2,6],10:6,11:7,12:8,13:9,14:10,15:11,16:[1,18],17:15,19:12,30:[1,13],31:[1,14],34:[1,16],35:[1,17],43:[1,19]},{5:[2,7],9:[2,7],16:[2,7],30:[2,7],31:[2,7],34:[2,7],35:[2,7],43:[2,7]},{5:[2,8],9:[2,8],16:[2,8],30:[2,8],31:[2,8],34:[2,8],35:[2,8],43:[2,8]},{5:[2,9],9:[2,9],16:[2,9],30:[2,9],31:[2,9],34:[2,9],35:[2,9],43:[2,9]},{5:[2,10],9:[2,10],16:[2,10],30:[2,10],31:[2,10],34:[2,10],35:[2,10],43:[2,10]},{5:[2,11],9:[2,11],16:[2,11],30:[2,11],31:[2,11],34:[2,11],35:[2,11],43:[2,11]},{20:[1,24],22:[1,25],24:[1,23]},{5:[2,21],9:[2,21],16:[2,21],26:[1,26],27:[2,21],30:[2,21],31:[2,21],34:[2,21],35:[2,21],43:[2,21]},{8:[1,38],17:36,18:27,22:[1,39],26:[1,32],37:28,38:29,39:[1,30],40:[1,45],41:33,42:34,43:[1,19],44:37,45:[1,43],46:40,47:[1,44],48:35,49:[1,41],50:[1,42],54:31},{20:[2,13],22:[2,13],24:[2,13],26:[1,46]},{8:[1,38],17:36,18:47,22:[1,39],26:[1,32],37:28,38:29,39:[1,30],40:[1,45],41:33,42:34,43:[1,19],44:37,45:[1,43],46:40,47:[1,44],48:35,49:[1,41],50:[1,42],54:31},{8:[1,38],17:36,18:48,22:[1,39],26:[1,32],37:28,38:29,39:[1,30],40:[1,45],41:33,42:34,43:[1,19],44:37,45:[1,43],46:40,47:[1,44],48:35,49:[1,41],50:[1,42],54:31},{17:49,43:[1,19]},{5:[2,36],8:[2,36],9:[2,36],16:[2,36],20:[2,36],22:[2,36],23:[2,36],24:[2,36],26:[2,36],27:[2,36],29:[2,36],30:[2,36],31:[2,36],34:[2,36],35:[2,36],39:[2,36],40:[2,36],43:[2,36],45:[2,36],47:[2,36],49:[2,36],50:[2,36],55:[2,36],56:[2,36],57:[2,36],58:[2,36],59:[2,36],60:[2,36],63:[2,36]},{1:[2,1]},{9:[1,50]},{5:[2,5],9:[2,5]},{8:[1,38],17:36,18:51,22:[1,39],25:[1,52],26:[1,32],37:28,38:29,39:[1,30],40:[1,45],41:33,42:34,43:[1,19],44:37,45:[1,43],46:40,47:[1,44],48:35,49:[1,41],50:[1,42],54:31},{17:55,21:53,40:[1,54],43:[1,19]},{8:[1,38],17:36,18:56,22:[1,39],26:[1,32],37:28,38:29,39:[1,30],40:[1,45],41:33,42:34,43:[1,19],44:37,45:[1,43],46:40,47:[1,44],48:35,49:[1,41],50:[1,42],54:31},{27:[1,57]},{5:[2,23],9:[2,23],16:[2,23],27:[2,23],30:[2,23],31:[2,23],34:[2,23],35:[2,23],43:[2,23]},{5:[2,29],8:[2,29],9:[2,29],16:[2,29],20:[1,60],22:[1,59],23:[2,29],27:[2,29],29:[2,29],30:[2,29],31:[2,29],34:[2,29],35:[2,29],39:[1,61],43:[2,29],55:[1,58],56:[1,62],57:[1,63],58:[1,64],59:[1,65],60:[1,66]},{5:[2,30],8:[2,30],9:[2,30],16:[2,30],23:[2,30],27:[2,30],29:[2,30],30:[2,30],31:[2,30],34:[2,30],35:[2,30],43:[2,30]},{17:36,26:[1,32],37:67,40:[1,45],43:[1,19],44:37,45:[1,43],46:40,47:[1,44],48:35,49:[1,41],50:[1,42],54:31},{5:[2,48],8:[2,48],9:[2,48],16:[2,48],20:[2,48],22:[2,48],23:[2,48],27:[2,48],29:[2,48],30:[2,48],31:[2,48],34:[2,48],35:[2,48],39:[2,48],43:[2,48],55:[2,48],56:[2,48],57:[2,48],58:[2,48],59:[2,48],60:[2,48]},{8:[1,38],12:69,17:70,18:68,22:[1,39],26:[1,32],30:[1,13],31:[1,14],37:28,38:29,39:[1,30],40:[1,45],41:33,42:34,43:[1,19],44:37,45:[1,43],46:40,47:[1,44],48:35,49:[1,41],50:[1,42],54:31},{5:[2,34],8:[2,34],9:[2,34],16:[2,34],23:[2,34],27:[2,34],29:[2,34],30:[2,34],31:[2,34],34:[2,34],35:[2,34],43:[2,34]},{5:[2,35],8:[2,35],9:[2,35],16:[2,35],23:[2,35],27:[2,35],29:[2,35],30:[2,35],31:[2,35],34:[2,35],35:[2,35],43:[2,35]},{5:[2,45],8:[2,45],9:[2,45],16:[2,45],20:[2,45],22:[2,45],23:[2,45],27:[2,45],29:[2,45],30:[2,45],31:[2,45],34:[2,45],35:[2,45],39:[2,45],43:[2,45],55:[2,45],56:[2,45],57:[2,45],58:[2,45],59:[2,45],60:[2,45]},{5:[2,46],8:[2,46],9:[2,46],16:[2,46],20:[2,46],22:[2,46],23:[2,46],27:[2,46],29:[2,46],30:[2,46],31:[2,46],34:[2,46],35:[2,46],39:[2,46],43:[2,46],55:[2,46],56:[2,46],57:[2,46],58:[2,46],59:[2,46],60:[2,46]},{5:[2,47],8:[2,47],9:[2,47],16:[2,47],20:[2,47],22:[2,47],23:[2,47],27:[2,47],29:[2,47],30:[2,47],31:[2,47],34:[2,47],35:[2,47],39:[2,47],43:[2,47],55:[2,47],56:[2,47],57:[2,47],58:[2,47],59:[2,47],60:[2,47]},{9:[1,71],17:75,43:[1,19],44:74,45:[1,43],61:72,62:73},{8:[1,38],17:36,18:78,22:[1,39],23:[1,76],26:[1,32],33:77,37:28,38:29,39:[1,30],40:[1,45],41:33,42:34,43:[1,19],44:37,45:[1,43],46:40,47:[1,44],48:35,49:[1,41],50:[1,42],54:31},{5:[2,40],8:[2,40],9:[2,40],16:[2,40],20:[2,40],22:[2,40],23:[2,40],27:[2,40],29:[2,40],30:[2,40],31:[2,40],34:[2,40],35:[2,40],39:[2,40],43:[2,40],55:[2,40],56:[2,40],57:[2,40],58:[2,40],59:[2,40],60:[2,40]},{5:[2,41],8:[2,41],9:[2,41],16:[2,41],20:[2,41],22:[2,41],23:[2,41],27:[2,41],29:[2,41],30:[2,41],31:[2,41],34:[2,41],35:[2,41],39:[2,41],43:[2,41],55:[2,41],56:[2,41],57:[2,41],58:[2,41],59:[2,41],60:[2,41]},{5:[2,42],8:[2,42],9:[2,42],16:[2,42],20:[2,42],22:[2,42],23:[2,42],27:[2,42],29:[2,42],30:[2,42],31:[2,42],34:[2,42],35:[2,42],39:[2,42],43:[2,42],55:[2,42],56:[2,42],57:[2,42],58:[2,42],59:[2,42],60:[2,42]},{5:[2,37],8:[2,37],9:[2,37],16:[2,37],20:[2,37],22:[2,37],23:[2,37],27:[2,37],29:[2,37],30:[2,37],31:[2,37],34:[2,37],35:[2,37],39:[2,37],43:[2,37],55:[2,37],56:[2,37],57:[2,37],58:[2,37],59:[2,37],60:[2,37],63:[2,37]},{5:[2,38],8:[2,38],9:[2,38],16:[2,38],20:[2,38],22:[2,38],23:[2,38],27:[2,38],29:[2,38],30:[2,38],31:[2,38],34:[2,38],35:[2,38],39:[2,38],43:[2,38],55:[2,38],56:[2,38],57:[2,38],58:[2,38],59:[2,38],60:[2,38]},{5:[2,39],8:[2,39],9:[2,39],16:[2,39],20:[2,39],22:[2,39],23:[2,39],27:[2,39],29:[2,39],30:[2,39],31:[2,39],34:[2,39],35:[2,39],39:[2,39],43:[2,39],55:[2,39],56:[2,39],57:[2,39],58:[2,39],59:[2,39],60:[2,39]},{8:[1,38],17:36,18:78,22:[1,39],26:[1,32],32:79,33:80,37:28,38:29,39:[1,30],40:[1,45],41:33,42:34,43:[1,19],44:37,45:[1,43],46:40,47:[1,44],48:35,49:[1,41],50:[1,42],54:31},{6:81,8:[1,5]},{6:82,8:[1,5]},{8:[1,38],17:36,18:83,22:[1,39],26:[1,32],37:28,38:29,39:[1,30],40:[1,45],41:33,42:34,43:[1,19],44:37,45:[1,43],46:40,47:[1,44],48:35,49:[1,41],50:[1,42],54:31},{5:[2,4],9:[2,4],16:[2,4],30:[2,4],31:[2,4],34:[2,4],35:[2,4],36:[2,4],43:[2,4]},{5:[2,16],9:[2,16],16:[2,16],30:[2,16],31:[2,16],34:[2,16],35:[2,16],43:[2,16]},{26:[1,84]},{20:[2,14],22:[2,14],24:[2,14]},{5:[2,32],8:[2,32],9:[2,32],16:[2,32],20:[2,32],22:[2,32],23:[2,32],24:[2,32],27:[2,32],29:[2,32],30:[2,32],31:[2,32],34:[2,32],35:[2,32],39:[2,32],43:[2,32],55:[2,32],56:[2,32],57:[2,32],58:[2,32],59:[2,32],60:[2,32]},{5:[2,33],8:[2,33],9:[2,33],16:[2,33],20:[2,33],22:[2,33],23:[2,33],24:[2,33],27:[2,33],29:[2,33],30:[2,33],31:[2,33],34:[2,33],35:[2,33],39:[2,33],43:[2,33],55:[2,33],56:[2,33],57:[2,33],58:[2,33],59:[2,33],60:[2,33]},{23:[1,85]},{5:[2,22],9:[2,22],16:[2,22],27:[2,22],30:[2,22],31:[2,22],34:[2,22],35:[2,22],43:[2,22]},{17:36,26:[1,32],37:86,40:[1,45],43:[1,19],44:37,45:[1,43],46:40,47:[1,44],48:35,49:[1,41],50:[1,42],54:31},{8:[1,38],17:36,18:87,22:[1,39],26:[1,32],37:28,38:29,39:[1,30],40:[1,45],41:33,42:34,43:[1,19],44:37,45:[1,43],46:40,47:[1,44],48:35,49:[1,41],50:[1,42],54:31},{17:55,21:88,40:[1,54],43:[1,19]},{17:36,26:[1,32],37:89,40:[1,45],43:[1,19],44:37,45:[1,43],46:40,47:[1,44],48:35,49:[1,41],50:[1,42],54:31},{17:36,26:[1,32],37:90,40:[1,45],43:[1,19],44:37,45:[1,43],46:40,47:[1,44],48:35,49:[1,41],50:[1,42],54:31},{17:36,26:[1,32],37:91,40:[1,45],43:[1,19],44:37,45:[1,43],46:40,47:[1,44],48:35,49:[1,41],50:[1,42],54:31},{17:36,26:[1,32],37:92,40:[1,45],43:[1,19],44:37,45:[1,43],46:40,47:[1,44],48:35,49:[1,41],50:[1,42],54:31},{17:36,26:[1,32],37:93,40:[1,45],43:[1,19],44:37,45:[1,43],46:40,47:[1,44],48:35,49:[1,41],50:[1,42],54:31},{17:36,26:[1,32],37:94,40:[1,45],43:[1,19],44:37,45:[1,43],46:40,47:[1,44],48:35,49:[1,41],50:[1,42],54:31},{5:[2,31],8:[2,31],9:[2,31],16:[2,31],20:[1,60],22:[1,59],23:[2,31],27:[2,31],29:[2,31],30:[2,31],31:[2,31],34:[2,31],35:[2,31],39:[1,61],43:[2,31],55:[1,58],56:[1,62],57:[1,63],58:[1,64],59:[1,65],60:[1,66]},{27:[1,95]},{27:[1,96]},{20:[2,46],22:[2,46],26:[1,46],27:[2,46],39:[2,46],55:[2,46],56:[2,46],57:[2,46],58:[2,46],59:[2,46],60:[2,46]},{5:[2,60],8:[2,60],9:[2,60],16:[2,60],23:[2,60],27:[2,60],29:[2,60],30:[2,60],31:[2,60],34:[2,60],35:[2,60],43:[2,60]},{9:[1,97]},{9:[2,62],29:[1,98]},{63:[1,99]},{63:[1,100]},{5:[2,66],8:[2,66],9:[2,66],16:[2,66],23:[2,66],27:[2,66],29:[2,66],30:[2,66],31:[2,66],34:[2,66],35:[2,66],43:[2,66]},{23:[1,101]},{23:[2,68],27:[2,68],29:[1,102]},{27:[1,103]},{27:[2,25]},{5:[2,26],9:[2,26],16:[2,26],30:[2,26],31:[2,26],34:[2,26],35:[2,26],43:[2,26]},{5:[2,27],9:[2,27],16:[2,27],30:[2,27],31:[2,27],34:[2,27],35:[2,27],36:[1,104],43:[2,27]},{5:[2,12],9:[2,12],16:[2,12],30:[2,12],31:[2,12],34:[2,12],35:[2,12],43:[2,12]},{17:107,27:[1,105],28:106,43:[1,19]},{20:[2,15],22:[2,15],24:[2,15]},{5:[2,49],8:[2,49],9:[2,49],16:[2,49],20:[1,60],22:[1,59],23:[2,49],27:[2,49],29:[2,49],30:[2,49],31:[2,49],34:[2,49],35:[2,49],39:[2,49],43:[2,49],55:[2,49],56:[1,62],57:[1,63],58:[1,64],59:[1,65],60:[1,66]},{23:[1,108]},{5:[2,51],8:[2,51],9:[2,51],16:[2,51],20:[2,51],22:[2,51],23:[2,51],27:[2,51],29:[2,51],30:[2,51],31:[2,51],34:[2,51],35:[2,51],39:[2,51],43:[2,51],55:[2,51],56:[2,51],57:[2,51],58:[2,51],59:[2,51],60:[2,51]},{5:[2,52],8:[2,52],9:[2,52],16:[2,52],20:[1,60],22:[1,59],23:[2,52],27:[2,52],29:[2,52],30:[2,52],31:[2,52],34:[2,52],35:[2,52],39:[2,52],43:[2,52],55:[2,52],56:[1,62],57:[1,63],58:[1,64],59:[1,65],60:[1,66]},{5:[2,53],8:[2,53],9:[2,53],16:[2,53],20:[1,60],22:[1,59],23:[2,53],27:[2,53],29:[2,53],30:[2,53],31:[2,53],34:[2,53],35:[2,53],39:[2,53],43:[2,53],55:[2,53],56:[2,53],57:[2,53],58:[1,64],59:[1,65],60:[1,66]},{5:[2,54],8:[2,54],9:[2,54],16:[2,54],20:[1,60],22:[1,59],23:[2,54],27:[2,54],29:[2,54],30:[2,54],31:[2,54],34:[2,54],35:[2,54],39:[2,54],43:[2,54],55:[2,54],56:[2,54],57:[2,54],58:[1,64],59:[1,65],60:[1,66]},{5:[2,55],8:[2,55],9:[2,55],16:[2,55],20:[2,55],22:[2,55],23:[2,55],27:[2,55],29:[2,55],30:[2,55],31:[2,55],34:[2,55],35:[2,55],39:[2,55],43:[2,55],55:[2,55],56:[2,55],57:[2,55],58:[1,64],59:[1,65],60:[1,66]},{5:[2,56],8:[2,56],9:[2,56],16:[2,56],20:[2,56],22:[2,56],23:[2,56],27:[2,56],29:[2,56],30:[2,56],31:[2,56],34:[2,56],35:[2,56],39:[2,56],43:[2,56],55:[2,56],56:[2,56],57:[2,56],58:[2,56],59:[1,65],60:[1,66]},{5:[2,57],8:[2,57],9:[2,57],16:[2,57],20:[2,57],22:[2,57],23:[2,57],27:[2,57],29:[2,57],30:[2,57],31:[2,57],34:[2,57],35:[2,57],39:[2,57],43:[2,57],55:[2,57],56:[2,57],57:[2,57],58:[2,57],59:[1,65],60:[1,66]},{5:[2,58],8:[2,58],9:[2,58],16:[2,58],20:[2,58],22:[2,58],23:[2,58],27:[2,58],29:[2,58],30:[2,58],31:[2,58],34:[2,58],35:[2,58],39:[2,58],43:[2,58],55:[2,58],56:[2,58],57:[2,58],58:[2,58],59:[2,58],60:[2,58]},{5:[2,59],8:[2,59],9:[2,59],16:[2,59],20:[2,59],22:[2,59],23:[2,59],27:[2,59],29:[2,59],30:[2,59],31:[2,59],34:[2,59],35:[2,59],39:[2,59],43:[2,59],55:[2,59],56:[2,59],57:[2,59],58:[2,59],59:[2,59],60:[2,59]},{5:[2,61],8:[2,61],9:[2,61],16:[2,61],23:[2,61],27:[2,61],29:[2,61],30:[2,61],31:[2,61],34:[2,61],35:[2,61],43:[2,61]},{17:75,43:[1,19],44:74,45:[1,43],61:109,62:73},{8:[1,38],17:36,18:110,22:[1,39],26:[1,32],37:28,38:29,39:[1,30],40:[1,45],41:33,42:34,43:[1,19],44:37,45:[1,43],46:40,47:[1,44],48:35,49:[1,41],50:[1,42],54:31},{8:[1,38],17:36,18:111,22:[1,39],26:[1,32],37:28,38:29,39:[1,30],40:[1,45],41:33,42:34,43:[1,19],44:37,45:[1,43],46:40,47:[1,44],48:35,49:[1,41],50:[1,42],54:31},{5:[2,67],8:[2,67],9:[2,67],16:[2,67],23:[2,67],27:[2,67],29:[2,67],30:[2,67],31:[2,67],34:[2,67],35:[2,67],43:[2,67]},{8:[1,38],17:36,18:78,22:[1,39],26:[1,32],33:112,37:28,38:29,39:[1,30],40:[1,45],41:33,42:34,43:[1,19],44:37,45:[1,43],46:40,47:[1,44],48:35,49:[1,41],50:[1,42],54:31},{5:[2,24],9:[2,24],16:[2,24],27:[2,24],30:[2,24],31:[2,24],34:[2,24],35:[2,24],43:[2,24]},{6:113,8:[1,5]},{6:114,8:[1,5]},{27:[1,115]},{27:[2,19],29:[1,116]},{5:[2,50],8:[2,50],9:[2,50],16:[2,50],20:[2,50],22:[2,50],23:[2,50],27:[2,50],29:[2,50],30:[2,50],31:[2,50],34:[2,50],35:[2,50],39:[2,50],43:[2,50],55:[2,50],56:[2,50],57:[2,50],58:[2,50],59:[2,50],60:[2,50]},{9:[2,63]},{9:[2,64],29:[2,64]},{9:[2,65],29:[2,65]},{23:[2,69],27:[2,69]},{5:[2,28],9:[2,28],16:[2,28],30:[2,28],31:[2,28],34:[2,28],35:[2,28],43:[2,28]},{5:[2,17],9:[2,17],16:[2,17],30:[2,17],31:[2,17],34:[2,17],35:[2,17],43:[2,17]},{6:117,8:[1,5]},{17:107,28:118,43:[1,19]},{5:[2,18],9:[2,18],16:[2,18],30:[2,18],31:[2,18],34:[2,18],35:[2,18],43:[2,18]},{27:[2,20]}],
defaultActions: {3:[2,2],4:[2,3],20:[2,1],80:[2,25],109:[2,63],118:[2,20]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* skip comment */
break;
case 2:/* skip comment */
break;
case 3:return 56
break;
case 4:return 57
break;
case 5:return 39
break;
case 6:return 55
break;
case 7:return '^'
break;
case 8:return 29
break;
case 9:return 50
break;
case 10:return 49
break;
case 11:return 52
break;
case 12:return 53
break;
case 13:return "BUILTIN_ARG"
break;
case 14:return "BUILTIN_NULL"
break;
case 15:return 16
break;
case 16:return 35
break;
case 17:return 36
break;
case 18:return 34
break;
case 19:return 25
break;
case 20:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 45;
break;
case 21:return 40;
break;
case 22:return 47;
break;
case 23:return 43
break;
case 24:return 26
break;
case 25:return 27
break;
case 26:return 8
break;
case 27:return 9
break;
case 28:return 63
break;
case 29:return 22
break;
case 30:return 23
break;
case 31:return 20
break;
case 32:return 58
break;
case 33:return 59
break;
case 34:return 60
break;
case 35:return 24
break;
case 36:return 5
break;
case 37:return "unlexable_token"
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/[^\n]*)/,/^(?:#[^\n]*)/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:\^)/,/^(?:,)/,/^(?:PI\b)/,/^(?:E\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:(forward|fd|back|bk|left|lt|right|rt|setheading|sh|towards|distanceto|setposition|setpos|sp))/,/^(?:(clearall|ca|cleardrawing|ca|penup|pu|pendown|pd|getheading|gh|getposition|gp|getspeed|help|demo|testcard))/,/^(?:(set )\b)/,/^(?:(if|IF))/,/^(?:(else|ELSE))/,/^(?:(repeat|REPEAT)\b)/,/^(?:(function)\b)/,/^(?:"(?:(\\)["bfnrt/(\\)]|(\\)u[a-fA-F0-9]{4}|[^"(\\)])*")/,/^(?:(-?(?:[0-9]|[1-9][0-9]+))\b)/,/^(?:(-?(?:[0-9]|[1-9][0-9]+))((?:\.[0-9]+))?((?:[eE][-+]?[0-9]+))?\b)/,/^(?:[a-zA-Z]+([\w]*)\b)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?::)/,/^(?:\[)/,/^(?:\])/,/^(?:\.)/,/^(?:==)/,/^(?:<)/,/^(?:>)/,/^(?:=)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}