/* parser generated by jison 0.4.10 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"weblogo":4,"EOF":5,"block":6,"statements":7,"{":8,"}":9,"statement":10,"assignment":11,"function_call":12,"repeat_stmt":13,"if_stmt":14,"set_stmt":15,"SET":16,"identifier":17,"expr":18,"=":19,"FUNCTION":20,"(":21,")":22,"param_list":23,",":24,"BUILTIN_NULL":25,"BUILTIN_ARG":26,"arguments":27,"REPEAT":28,"IF":29,"ELSE":30,"re":31,"complex_value":32,"-":33,"index":34,"INT":35,"JSONObject":36,"JSONArray":37,"+":38,"[":39,"]":40,".":41,"*":42,"/":43,"number":44,"==":45,"<":46,">":47,"IDENTIFIER":48,"string":49,"STRING":50,"NUMBER":51,"E":52,"PI":53,"boolean":54,"TRUE":55,"FALSE":56,"JSONMemberList":57,"JSONMember":58,":":59,"JSONElementList":60,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"{",9:"}",16:"SET",19:"=",20:"FUNCTION",21:"(",22:")",24:",",25:"BUILTIN_NULL",26:"BUILTIN_ARG",28:"REPEAT",29:"IF",30:"ELSE",33:"-",35:"INT",38:"+",39:"[",40:"]",41:".",42:"*",43:"/",45:"==",46:"<",47:">",48:"IDENTIFIER",50:"STRING",51:"NUMBER",52:"E",53:"PI",55:"TRUE",56:"FALSE",59:":"},
productions_: [0,[3,2],[4,1],[4,1],[6,3],[7,2],[7,1],[10,1],[10,1],[10,1],[10,1],[10,1],[15,3],[11,3],[11,6],[11,7],[23,1],[23,3],[12,1],[12,3],[12,2],[12,4],[13,3],[14,3],[14,5],[18,1],[18,1],[18,2],[27,1],[34,1],[34,1],[32,1],[32,1],[31,3],[31,4],[31,3],[31,3],[31,3],[31,3],[31,1],[31,1],[31,3],[31,3],[31,3],[31,3],[31,3],[17,1],[49,1],[44,1],[44,1],[44,1],[54,1],[54,1],[36,2],[36,3],[57,1],[57,3],[58,3],[58,3],[37,2],[37,3],[60,1],[60,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:return $$[$0-1];
break;
case 2:this.$ = {};
   this.$['type'] = 'weblogo';
   this.$['handler'] = 'skip';
   this.$['value'] = $$[$0];
break;
case 3:this.$ = {};
   this.$['type'] = 'weblogo';
   this.$['handler'] = 'skip';
   this.$['value'] = $$[$0];
break;
case 4:this.$ = {};
    this.$['type'] = 'block';
    this.$['handler'] = 'block';
    this.$['value'] = $$[$0-1];
break;
case 5:this.$ = $$[$0]; 
    $$[$0].unshift($$[$0-1]);
break;
case 6:this.$ = [$$[$0]];
break;
case 7:this.$ = {};
    this.$['type'] = 'statement';
    this.$['handler'] = 'statement';
    this.$['value'] = $$[$0];
break;
case 8:this.$ = {};
    this.$['type'] = 'statement';
    this.$['handler'] = 'statement';
    this.$['value'] = $$[$0];
break;
case 9:this.$ = {};
   this.$['type'] = 'repeat';
   this.$['handler'] = 'statement';
   this.$['value'] = $$[$0];
break;
case 10:this.$ = {};
   this.$['type'] = 'if';
   this.$['handler'] = 'statement';
   this.$['value'] = $$[$0];
break;
case 12:this.$ = {}; 
    this.$['type'] = 'set_stmt'; 
    this.$['handler'] = 'set_stmt'; 
    this.$['args'] = [$$[$0-1], $$[$0]];
break;
case 13:this.$ = {};
    this.$['type'] = 'assignment';
    this.$['handler'] = 'var_assign';
    this.$['id'] = $$[$0-2];
    this.$['value'] = $$[$0];
break;
case 14:this.$ = {};
    this.$['type'] = 'assignment';
    this.$['handler'] = 'fun_assign';
    this.$['id'] = $$[$0-5];
    this.$['args'] = [];
    this.$['block'] = $$[$0];
break;
case 15:this.$ = {};
    this.$['type'] = 'assignment';
    this.$['handler'] = 'fun_assign';
    this.$['id'] = $$[$0-6];
    this.$['args'] = $$[$0-2];
    this.$['block'] = $$[$0];
break;
case 16:this.$ = [$$[$0]];
break;
case 17:this.$ = $$[$0]; 
    $$[$0].unshift($$[$0-2]);
break;
case 18:this.$ = {
    "type": "function",
    "handler": "builtin",
    "id": $$[$0]
    };
break;
case 19:this.$ = {
    "type": "function",
    "handler": "builtin",
    "id": $$[$0-2]
    };
break;
case 20:this.$ = {    
    "type": "function",      
    "handler": "func",      
    "id": $$[$0-1],      
    "args": $$[$0]
    };
break;
case 21:this.$ = {}; 
    this.$['type'] = 'function';
    this.$['handler'] = 'func';
    this.$['id'] = $$[$0-3];
    this.$['args'] = $$[$0-2];
break;
case 22:this.$ = {}; 
    this.$['type'] = 'repeat_stmt'; 
    this.$['handler'] = 'repeat_stmt'; 
    this.$['args'] = [$$[$0-1], $$[$0]];
break;
case 23:this.$ = {};
    this.$['type'] = 'if_stmt';
    this.$['handler'] = 'if_stmt';
    this.$['condition'] = $$[$0-1];
    this.$['block'] = $$[$0];
break;
case 24:this.$ = {};
    this.$['type'] = 'if_stmt';
    this.$['handler'] = 'ifelse_stmt';
    this.$['condition'] = $$[$0-3];
    this.$['block'] = [$$[$0-2], $$[$0]];
break;
case 27:this.$ = {};
   this.$['type'] = 'expr';
   this.$['handler'] = 'uminus';
   this.$['value'] = $$[$0];
break;
case 29:this.$ = {};
  this.$.type = "number";
  this.$.handler = "value";
  this.$.value = Number(yytext);
break;
case 33:this.$ = {};
   this.$['type'] = 're';
   this.$['handler'] = 'op';
   this.$['op'] = '+';
   this.$['args'] = [$$[$0-2], $$[$0]];
break;
case 34:this.$ = {};
   this.$['type'] = 're';
   this.$['handler'] = 'index_op';
   this.$['args'] = [$$[$0-3], $$[$0-1]];
break;
case 35:this.$ = {};
   this.$.handler = "index_op";
   this.$.args = [$$[$0-2], $$[$0]];
break;
case 36:this.$ = {};
   this.$['type'] = 're';
   this.$['handler'] = 'op';
   this.$['op'] = '-';
   this.$['args'] = [$$[$0-2], $$[$0]];
break;
case 37:this.$ = {};
   this.$['type'] = 're';
   this.$['handler'] = 'op';
   this.$['op'] = '*';
   this.$['args'] = [$$[$0-2], $$[$0]];
break;
case 38:this.$ = {};
   this.$['type'] = 're';
   this.$['handler'] = 'op';
   this.$['op'] = '/';
   this.$['args'] = [$$[$0-2], $$[$0]];
break;
case 41:this.$ = {};
   this.$['type'] = 're';
   this.$['handler'] = 'op';
   this.$['op'] = '==';
   this.$['args'] = [$$[$0-2], $$[$0]];
break;
case 42:this.$ = {};
   this.$['type'] = 're';
   this.$['handler'] = 'op';
   this.$['op'] = '<';
   this.$['args'] = [$$[$0-2], $$[$0]];
break;
case 43:this.$ = {};
   this.$['type'] = 're';
   this.$['handler'] = 'op';
   this.$['op'] = '>';
   this.$['args'] = [$$[$0-2], $$[$0]];
break;
case 44:this.$ = {};
   this.$['type'] = 're';
   this.$['handler'] = 'group_op';
   this.$['args'] = [$$[$0-1]];
break;
case 45:this.$ = {};
   this.$['type'] = 're';
   this.$['handler'] = 'skip';
   this.$['value'] = $$[$0-1];
break;
case 46:this.$ = {};
    this.$['type'] = 'identifier';
    this.$['handler'] = 'value';
    this.$['value'] = yytext;
break;
case 47:this.$ = {};
    this.$['type'] = 'string';
    this.$['handler'] = 'value';
    this.$['value'] = yytext;
break;
case 48:this.$ = {};
    this.$['type'] = 'number';
    this.$['handler'] = 'value';
    this.$['value'] = Number(yytext);
break;
case 49:this.$ = {};
    this.$['type'] = 'number';
    this.$['handler'] = 'value';
    this.$['value'] = Math.E;
break;
case 50:this.$ = {};
    this.$['type'] = 'number';
    this.$['handler'] = 'value';
    this.$['value'] = Math.PI;
break;
case 51:this.$ = {};
    this.$['type'] = 'boolean';
    this.$['handler'] = 'value';
    this.$['value'] = true;
break;
case 52:this.$ = {};
    this.$['type'] = 'boolean';
    this.$['handler'] = 'value';
    this.$['value'] = false;
break;
case 53:this.$ = {};
    this.$['type'] = 'JSONObject';
    this.$['handler'] = 'JSONObject';
    this.$['value'] = '{}';
break;
case 54:this.$ = {};
    this.$['type'] = 'JSONObject';
    this.$['handler'] = 'JSONObject';
    this.$['value'] = $$[$0-1];
break;
case 55:this.$ = {};
    this.$ = [$$[$0]];
break;
case 56:this.$ = [$$[$0-2]]; this.$ = this.$.concat($$[$0]);
break;
case 57:this.$ = {key: $$[$0-2], value: $$[$0]};
break;
case 58:this.$ = {key: $$[$0-2], value: $$[$0]};
break;
case 59:this.$ = {};
    this.$['type'] = 'JSONArray';
    this.$['handler'] = 'list';
    this.$['value'] = [];
break;
case 60:this.$ = {};
    this.$['type'] = 'JSONArray';
    this.$['handler'] = 'list';
    this.$['value'] = $$[$0-1];
break;
case 61:this.$ = [$$[$0]];
break;
case 62:this.$ = $$[$0]; 
    $$[$0].unshift($$[$0-2]);
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:[1,5],10:6,11:7,12:8,13:9,14:10,15:11,16:[1,17],17:12,25:[1,13],26:[1,14],28:[1,15],29:[1,16],48:[1,18]},{1:[3]},{5:[1,19]},{5:[2,2]},{5:[2,3]},{7:20,10:6,11:7,12:8,13:9,14:10,15:11,16:[1,17],17:12,25:[1,13],26:[1,14],28:[1,15],29:[1,16],48:[1,18]},{5:[2,6],7:21,9:[2,6],10:6,11:7,12:8,13:9,14:10,15:11,16:[1,17],17:12,25:[1,13],26:[1,14],28:[1,15],29:[1,16],48:[1,18]},{5:[2,7],9:[2,7],16:[2,7],25:[2,7],26:[2,7],28:[2,7],29:[2,7],48:[2,7]},{5:[2,8],9:[2,8],16:[2,8],25:[2,8],26:[2,8],28:[2,8],29:[2,8],48:[2,8]},{5:[2,9],9:[2,9],16:[2,9],25:[2,9],26:[2,9],28:[2,9],29:[2,9],48:[2,9]},{5:[2,10],9:[2,10],16:[2,10],25:[2,10],26:[2,10],28:[2,10],29:[2,10],48:[2,10]},{5:[2,11],9:[2,11],16:[2,11],25:[2,11],26:[2,11],28:[2,11],29:[2,11],48:[2,11]},{19:[1,22],21:[1,23]},{5:[2,18],9:[2,18],16:[2,18],21:[1,24],22:[2,18],25:[2,18],26:[2,18],28:[2,18],29:[2,18],48:[2,18]},{8:[1,37],17:30,18:25,21:[1,31],31:26,32:27,33:[1,28],36:32,37:33,39:[1,38],44:29,48:[1,18],51:[1,34],52:[1,35],53:[1,36]},{8:[1,37],17:30,18:39,21:[1,31],31:26,32:27,33:[1,28],36:32,37:33,39:[1,38],44:29,48:[1,18],51:[1,34],52:[1,35],53:[1,36]},{8:[1,37],17:30,18:40,21:[1,31],31:26,32:27,33:[1,28],36:32,37:33,39:[1,38],44:29,48:[1,18],51:[1,34],52:[1,35],53:[1,36]},{17:41,48:[1,18]},{5:[2,46],8:[2,46],9:[2,46],16:[2,46],19:[2,46],21:[2,46],22:[2,46],24:[2,46],25:[2,46],26:[2,46],28:[2,46],29:[2,46],33:[2,46],38:[2,46],39:[2,46],40:[2,46],41:[2,46],42:[2,46],43:[2,46],45:[2,46],46:[2,46],47:[2,46],48:[2,46],51:[2,46],52:[2,46],53:[2,46],59:[2,46]},{1:[2,1]},{9:[1,42]},{5:[2,5],9:[2,5]},{8:[1,37],17:30,18:43,20:[1,44],21:[1,31],31:26,32:27,33:[1,28],36:32,37:33,39:[1,38],44:29,48:[1,18],51:[1,34],52:[1,35],53:[1,36]},{17:30,21:[1,31],27:45,31:46,44:29,48:[1,18],51:[1,34],52:[1,35],53:[1,36]},{22:[1,47]},{5:[2,20],9:[2,20],16:[2,20],22:[2,20],25:[2,20],26:[2,20],28:[2,20],29:[2,20],48:[2,20]},{5:[2,25],8:[2,25],9:[2,25],16:[2,25],22:[2,25],24:[2,25],25:[2,25],26:[2,25],28:[2,25],29:[2,25],33:[1,51],38:[1,48],39:[1,49],40:[2,25],41:[1,50],42:[1,52],43:[1,53],45:[1,54],46:[1,55],47:[1,56],48:[2,25]},{5:[2,26],8:[2,26],9:[2,26],16:[2,26],22:[2,26],24:[2,26],25:[2,26],26:[2,26],28:[2,26],29:[2,26],40:[2,26],48:[2,26]},{17:30,21:[1,31],31:57,44:29,48:[1,18],51:[1,34],52:[1,35],53:[1,36]},{5:[2,39],8:[2,39],9:[2,39],16:[2,39],22:[2,39],24:[2,39],25:[2,39],26:[2,39],28:[2,39],29:[2,39],33:[2,39],38:[2,39],39:[2,39],40:[2,39],41:[2,39],42:[2,39],43:[2,39],45:[2,39],46:[2,39],47:[2,39],48:[2,39]},{5:[2,40],8:[2,40],9:[2,40],16:[2,40],22:[2,40],24:[2,40],25:[2,40],26:[2,40],28:[2,40],29:[2,40],33:[2,40],38:[2,40],39:[2,40],40:[2,40],41:[2,40],42:[2,40],43:[2,40],45:[2,40],46:[2,40],47:[2,40],48:[2,40]},{8:[1,37],12:59,17:60,18:58,21:[1,31],25:[1,13],26:[1,14],31:26,32:27,33:[1,28],36:32,37:33,39:[1,38],44:29,48:[1,18],51:[1,34],52:[1,35],53:[1,36]},{5:[2,31],8:[2,31],9:[2,31],16:[2,31],22:[2,31],24:[2,31],25:[2,31],26:[2,31],28:[2,31],29:[2,31],40:[2,31],48:[2,31]},{5:[2,32],8:[2,32],9:[2,32],16:[2,32],22:[2,32],24:[2,32],25:[2,32],26:[2,32],28:[2,32],29:[2,32],40:[2,32],48:[2,32]},{5:[2,48],8:[2,48],9:[2,48],16:[2,48],22:[2,48],24:[2,48],25:[2,48],26:[2,48],28:[2,48],29:[2,48],33:[2,48],38:[2,48],39:[2,48],40:[2,48],41:[2,48],42:[2,48],43:[2,48],45:[2,48],46:[2,48],47:[2,48],48:[2,48]},{5:[2,49],8:[2,49],9:[2,49],16:[2,49],22:[2,49],24:[2,49],25:[2,49],26:[2,49],28:[2,49],29:[2,49],33:[2,49],38:[2,49],39:[2,49],40:[2,49],41:[2,49],42:[2,49],43:[2,49],45:[2,49],46:[2,49],47:[2,49],48:[2,49]},{5:[2,50],8:[2,50],9:[2,50],16:[2,50],22:[2,50],24:[2,50],25:[2,50],26:[2,50],28:[2,50],29:[2,50],33:[2,50],38:[2,50],39:[2,50],40:[2,50],41:[2,50],42:[2,50],43:[2,50],45:[2,50],46:[2,50],47:[2,50],48:[2,50]},{9:[1,61],17:65,48:[1,18],49:64,50:[1,66],57:62,58:63},{8:[1,37],17:30,18:69,21:[1,31],31:26,32:27,33:[1,28],36:32,37:33,39:[1,38],40:[1,67],44:29,48:[1,18],51:[1,34],52:[1,35],53:[1,36],60:68},{6:70,8:[1,5]},{6:71,8:[1,5]},{8:[1,37],17:30,18:72,21:[1,31],31:26,32:27,33:[1,28],36:32,37:33,39:[1,38],44:29,48:[1,18],51:[1,34],52:[1,35],53:[1,36]},{5:[2,4],9:[2,4],16:[2,4],25:[2,4],26:[2,4],28:[2,4],29:[2,4],30:[2,4],48:[2,4]},{5:[2,13],9:[2,13],16:[2,13],25:[2,13],26:[2,13],28:[2,13],29:[2,13],48:[2,13]},{21:[1,73]},{22:[1,74]},{22:[2,28],33:[1,51],38:[1,48],39:[1,49],41:[1,50],42:[1,52],43:[1,53],45:[1,54],46:[1,55],47:[1,56]},{5:[2,19],9:[2,19],16:[2,19],22:[2,19],25:[2,19],26:[2,19],28:[2,19],29:[2,19],48:[2,19]},{17:30,21:[1,31],31:75,44:29,48:[1,18],51:[1,34],52:[1,35],53:[1,36]},{17:30,21:[1,31],31:76,44:29,48:[1,18],51:[1,34],52:[1,35],53:[1,36]},{17:79,34:77,35:[1,78],48:[1,18]},{17:30,21:[1,31],31:80,44:29,48:[1,18],51:[1,34],52:[1,35],53:[1,36]},{17:30,21:[1,31],31:81,44:29,48:[1,18],51:[1,34],52:[1,35],53:[1,36]},{17:30,21:[1,31],31:82,44:29,48:[1,18],51:[1,34],52:[1,35],53:[1,36]},{17:30,21:[1,31],31:83,44:29,48:[1,18],51:[1,34],52:[1,35],53:[1,36]},{17:30,21:[1,31],31:84,44:29,48:[1,18],51:[1,34],52:[1,35],53:[1,36]},{17:30,21:[1,31],31:85,44:29,48:[1,18],51:[1,34],52:[1,35],53:[1,36]},{5:[2,27],8:[2,27],9:[2,27],16:[2,27],22:[2,27],24:[2,27],25:[2,27],26:[2,27],28:[2,27],29:[2,27],33:[1,51],38:[1,48],39:[1,49],40:[2,27],41:[1,50],42:[1,52],43:[1,53],45:[1,54],46:[1,55],47:[1,56],48:[2,27]},{22:[1,86]},{22:[1,87]},{21:[1,23],22:[2,40],33:[2,40],38:[2,40],39:[2,40],41:[2,40],42:[2,40],43:[2,40],45:[2,40],46:[2,40],47:[2,40]},{5:[2,53],8:[2,53],9:[2,53],16:[2,53],22:[2,53],24:[2,53],25:[2,53],26:[2,53],28:[2,53],29:[2,53],40:[2,53],48:[2,53]},{9:[1,88]},{9:[2,55],24:[1,89]},{59:[1,90]},{59:[1,91]},{59:[2,47]},{5:[2,59],8:[2,59],9:[2,59],16:[2,59],22:[2,59],24:[2,59],25:[2,59],26:[2,59],28:[2,59],29:[2,59],40:[2,59],48:[2,59]},{40:[1,92]},{24:[1,93],40:[2,61]},{5:[2,22],9:[2,22],16:[2,22],25:[2,22],26:[2,22],28:[2,22],29:[2,22],48:[2,22]},{5:[2,23],9:[2,23],16:[2,23],25:[2,23],26:[2,23],28:[2,23],29:[2,23],30:[1,94],48:[2,23]},{5:[2,12],9:[2,12],16:[2,12],25:[2,12],26:[2,12],28:[2,12],29:[2,12],48:[2,12]},{17:97,22:[1,95],23:96,48:[1,18]},{5:[2,21],9:[2,21],16:[2,21],22:[2,21],25:[2,21],26:[2,21],28:[2,21],29:[2,21],48:[2,21]},{5:[2,33],8:[2,33],9:[2,33],16:[2,33],22:[2,33],24:[2,33],25:[2,33],26:[2,33],28:[2,33],29:[2,33],33:[2,33],38:[2,33],39:[1,49],40:[2,33],41:[1,50],42:[1,52],43:[1,53],45:[1,54],46:[1,55],47:[1,56],48:[2,33]},{33:[1,51],38:[1,48],39:[1,49],40:[1,98],41:[1,50],42:[1,52],43:[1,53],45:[1,54],46:[1,55],47:[1,56]},{5:[2,35],8:[2,35],9:[2,35],16:[2,35],22:[2,35],24:[2,35],25:[2,35],26:[2,35],28:[2,35],29:[2,35],33:[2,35],38:[2,35],39:[2,35],40:[2,35],41:[2,35],42:[2,35],43:[2,35],45:[2,35],46:[2,35],47:[2,35],48:[2,35]},{5:[2,29],8:[2,29],9:[2,29],16:[2,29],22:[2,29],24:[2,29],25:[2,29],26:[2,29],28:[2,29],29:[2,29],33:[2,29],38:[2,29],39:[2,29],40:[2,29],41:[2,29],42:[2,29],43:[2,29],45:[2,29],46:[2,29],47:[2,29],48:[2,29]},{5:[2,30],8:[2,30],9:[2,30],16:[2,30],22:[2,30],24:[2,30],25:[2,30],26:[2,30],28:[2,30],29:[2,30],33:[2,30],38:[2,30],39:[2,30],40:[2,30],41:[2,30],42:[2,30],43:[2,30],45:[2,30],46:[2,30],47:[2,30],48:[2,30]},{5:[2,36],8:[2,36],9:[2,36],16:[2,36],22:[2,36],24:[2,36],25:[2,36],26:[2,36],28:[2,36],29:[2,36],33:[2,36],38:[2,36],39:[1,49],40:[2,36],41:[1,50],42:[1,52],43:[1,53],45:[1,54],46:[1,55],47:[1,56],48:[2,36]},{5:[2,37],8:[2,37],9:[2,37],16:[2,37],22:[2,37],24:[2,37],25:[2,37],26:[2,37],28:[2,37],29:[2,37],33:[2,37],38:[2,37],39:[1,49],40:[2,37],41:[1,50],42:[2,37],43:[2,37],45:[1,54],46:[1,55],47:[1,56],48:[2,37]},{5:[2,38],8:[2,38],9:[2,38],16:[2,38],22:[2,38],24:[2,38],25:[2,38],26:[2,38],28:[2,38],29:[2,38],33:[2,38],38:[2,38],39:[1,49],40:[2,38],41:[1,50],42:[2,38],43:[2,38],45:[1,54],46:[1,55],47:[1,56],48:[2,38]},{5:[2,41],8:[2,41],9:[2,41],16:[2,41],22:[2,41],24:[2,41],25:[2,41],26:[2,41],28:[2,41],29:[2,41],33:[2,41],38:[2,41],39:[2,41],40:[2,41],41:[2,41],42:[2,41],43:[2,41],45:[1,54],46:[1,55],47:[1,56],48:[2,41]},{5:[2,42],8:[2,42],9:[2,42],16:[2,42],22:[2,42],24:[2,42],25:[2,42],26:[2,42],28:[2,42],29:[2,42],33:[2,42],38:[2,42],39:[2,42],40:[2,42],41:[2,42],42:[2,42],43:[2,42],45:[2,42],46:[1,55],47:[1,56],48:[2,42]},{5:[2,43],8:[2,43],9:[2,43],16:[2,43],22:[2,43],24:[2,43],25:[2,43],26:[2,43],28:[2,43],29:[2,43],33:[2,43],38:[2,43],39:[2,43],40:[2,43],41:[2,43],42:[2,43],43:[2,43],45:[2,43],46:[1,55],47:[1,56],48:[2,43]},{5:[2,44],8:[2,44],9:[2,44],16:[2,44],22:[2,44],24:[2,44],25:[2,44],26:[2,44],28:[2,44],29:[2,44],33:[2,44],38:[2,44],39:[2,44],40:[2,44],41:[2,44],42:[2,44],43:[2,44],45:[2,44],46:[2,44],47:[2,44],48:[2,44]},{5:[2,45],8:[2,45],9:[2,45],16:[2,45],22:[2,45],24:[2,45],25:[2,45],26:[2,45],28:[2,45],29:[2,45],33:[2,45],38:[2,45],39:[2,45],40:[2,45],41:[2,45],42:[2,45],43:[2,45],45:[2,45],46:[2,45],47:[2,45],48:[2,45]},{5:[2,54],8:[2,54],9:[2,54],16:[2,54],22:[2,54],24:[2,54],25:[2,54],26:[2,54],28:[2,54],29:[2,54],40:[2,54],48:[2,54]},{17:65,48:[1,18],49:64,50:[1,66],57:99,58:63},{8:[1,37],17:30,18:100,21:[1,31],31:26,32:27,33:[1,28],36:32,37:33,39:[1,38],44:29,48:[1,18],51:[1,34],52:[1,35],53:[1,36]},{8:[1,37],17:30,18:101,21:[1,31],31:26,32:27,33:[1,28],36:32,37:33,39:[1,38],44:29,48:[1,18],51:[1,34],52:[1,35],53:[1,36]},{5:[2,60],8:[2,60],9:[2,60],16:[2,60],22:[2,60],24:[2,60],25:[2,60],26:[2,60],28:[2,60],29:[2,60],40:[2,60],48:[2,60]},{8:[1,37],17:30,18:69,21:[1,31],31:26,32:27,33:[1,28],36:32,37:33,39:[1,38],44:29,48:[1,18],51:[1,34],52:[1,35],53:[1,36],60:102},{6:103,8:[1,5]},{6:104,8:[1,5]},{22:[1,105]},{22:[2,16],24:[1,106]},{5:[2,34],8:[2,34],9:[2,34],16:[2,34],22:[2,34],24:[2,34],25:[2,34],26:[2,34],28:[2,34],29:[2,34],33:[2,34],38:[2,34],39:[2,34],40:[2,34],41:[2,34],42:[2,34],43:[2,34],45:[2,34],46:[2,34],47:[2,34],48:[2,34]},{9:[2,56]},{9:[2,57],24:[2,57]},{9:[2,58],24:[2,58]},{40:[2,62]},{5:[2,24],9:[2,24],16:[2,24],25:[2,24],26:[2,24],28:[2,24],29:[2,24],48:[2,24]},{5:[2,14],9:[2,14],16:[2,14],25:[2,14],26:[2,14],28:[2,14],29:[2,14],48:[2,14]},{6:107,8:[1,5]},{17:97,23:108,48:[1,18]},{5:[2,15],9:[2,15],16:[2,15],25:[2,15],26:[2,15],28:[2,15],29:[2,15],48:[2,15]},{22:[2,17]}],
defaultActions: {3:[2,2],4:[2,3],19:[2,1],66:[2,47],99:[2,56],102:[2,62],108:[2,17]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* skip comment */
break;
case 2:/* skip comment */
break;
case 3:return 42
break;
case 4:return 43
break;
case 5:return 33
break;
case 6:return 38
break;
case 7:return '^'
break;
case 8:return 24
break;
case 9:return 53
break;
case 10:return 52
break;
case 11:return 55
break;
case 12:return 56
break;
case 13:return "BUILTIN_ARG"
break;
case 14:return "BUILTIN_NULL"
break;
case 15:return 16
break;
case 16:return 29
break;
case 17:return 30
break;
case 18:return 28
break;
case 19:return 20
break;
case 20:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 50;
break;
case 21:return 51;
break;
case 22:return 35;
break;
case 23:return 48
break;
case 24:return 21
break;
case 25:return 22
break;
case 26:return 8
break;
case 27:return 9
break;
case 28:return 59
break;
case 29:return 39
break;
case 30:return 40
break;
case 31:return 41
break;
case 32:return 45
break;
case 33:return 46
break;
case 34:return 47
break;
case 35:return 19
break;
case 36:return 5
break;
case 37:return "unlexable_token"
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/[^\n]*)/,/^(?:#[^\n]*)/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:\^)/,/^(?:,)/,/^(?:PI\b)/,/^(?:E\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:(forward|fd|back|bk|left|lt|right|rt|setheading|sh|towards|distanceto|setposition|setpos|sp))/,/^(?:(clearall|ca|cleardrawing|ca|penup|pu|pendown|pd|getheading|gh|getposition|gp|getspeed|help|demo|testcard))/,/^(?:(set )\b)/,/^(?:(if|IF))/,/^(?:(else|ELSE))/,/^(?:(repeat|REPEAT)\b)/,/^(?:(function)\b)/,/^(?:"(?:(\\)["bfnrt/(\\)]|(\\)u[a-fA-F0-9]{4}|[^"(\\)])*")/,/^(?:(-?(?:[0-9]|[1-9][0-9]+))((?:\.[0-9]+))?((?:[eE][-+]?[0-9]+))?\b)/,/^(?:(-?(?:[0-9]|[1-9][0-9]+))\b)/,/^(?:[a-zA-Z]+([\w]*)\b)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?::)/,/^(?:\[)/,/^(?:\])/,/^(?:\.)/,/^(?:==)/,/^(?:<)/,/^(?:>)/,/^(?:=)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}